use chess::BitBoard;

/*
   Convert table from array order in 8A->1H to starting at 1A->8H

   let arr: [i16; 64] = [...];
   let piece_val = ...;

   let arr2: Vec<i16> = arr.iter().map(|x| x+piece_val).collect();

   arr2.chunks(8).for_each(|row| {
       row.iter().for_each(|x| print!("{}, ", x));
       println!();
   });

   println!("=========");

   arr2.chunks(8).rev().for_each(|row| {
       row.iter().for_each(|x| print!("{}, ", x));
       println!();
   });
*/

// TODO: use faster implementation (almost anything else is)
pub fn weighted_sum(bitboard: BitBoard, table: &[i16; 64]) -> i16 {
    bitboard.map(|sq| table[sq.to_index()]).sum()
}

// 1A -> 8H, piece value incorporated

pub const WHITE_PAWN: [i16; 64] = [
    100, 100, 100, 100, 100, 100, 100, 100, 105, 110, 110, 80, 80, 110, 110, 105, 105, 95, 90, 100,
    100, 90, 95, 105, 100, 100, 100, 120, 120, 100, 100, 100, 105, 105, 110, 125, 125, 110, 105,
    105, 110, 110, 120, 130, 130, 120, 110, 110, 150, 150, 150, 150, 150, 150, 150, 150, 100, 100,
    100, 100, 100, 100, 100, 100,
];

pub const BLACK_PAWN: [i16; 64] = [
    100, 100, 100, 100, 100, 100, 100, 100, 150, 150, 150, 150, 150, 150, 150, 150, 110, 110, 120,
    130, 130, 120, 110, 110, 105, 105, 110, 125, 125, 110, 105, 105, 100, 100, 100, 120, 120, 100,
    100, 100, 105, 95, 90, 100, 100, 90, 95, 105, 105, 110, 110, 80, 80, 110, 110, 105, 100, 100,
    100, 100, 100, 100, 100, 100,
];

pub const BLACK_KNIGHT: [i16; 64] = [
    270, 280, 290, 290, 290, 290, 280, 270, 280, 300, 320, 320, 320, 320, 300, 280, 290, 320, 330,
    335, 335, 330, 320, 290, 290, 325, 335, 340, 340, 335, 325, 290, 290, 320, 335, 340, 340, 335,
    320, 290, 290, 325, 330, 335, 335, 330, 325, 290, 280, 300, 320, 325, 325, 320, 300, 280, 270,
    280, 290, 290, 290, 290, 280, 270,
];

pub const WHITE_KNIGHT: [i16; 64] = [
    270, 280, 290, 290, 290, 290, 280, 270, 280, 300, 320, 325, 325, 320, 300, 280, 290, 325, 330,
    335, 335, 330, 325, 290, 290, 320, 335, 340, 340, 335, 320, 290, 290, 325, 335, 340, 340, 335,
    325, 290, 290, 320, 330, 335, 335, 330, 320, 290, 280, 300, 320, 320, 320, 320, 300, 280, 270,
    280, 290, 290, 290, 290, 280, 270,
];

pub const BLACK_BISHOP: [i16; 64] = [
    310, 320, 320, 320, 320, 320, 320, 310, 320, 330, 330, 330, 330, 330, 330, 320, 320, 330, 335,
    340, 340, 335, 330, 320, 320, 335, 335, 340, 340, 335, 335, 320, 320, 330, 340, 340, 340, 340,
    330, 320, 320, 340, 340, 340, 340, 340, 340, 320, 320, 335, 330, 330, 330, 330, 335, 320, 310,
    320, 320, 320, 320, 320, 320, 310,
];

pub const WHITE_BISHOP: [i16; 64] = [
    310, 320, 320, 320, 320, 320, 320, 310, 320, 335, 330, 330, 330, 330, 335, 320, 320, 340, 340,
    340, 340, 340, 340, 320, 320, 330, 340, 340, 340, 340, 330, 320, 320, 335, 335, 340, 340, 335,
    335, 320, 320, 330, 335, 340, 340, 335, 330, 320, 320, 330, 330, 330, 330, 330, 330, 320, 310,
    320, 320, 320, 320, 320, 320, 310,
];

pub const BLACK_ROOK: [i16; 64] = [
    500, 500, 500, 500, 500, 500, 500, 500, 505, 510, 510, 510, 510, 510, 510, 505, 495, 500, 500,
    500, 500, 500, 500, 495, 495, 500, 500, 500, 500, 500, 500, 495, 495, 500, 500, 500, 500, 500,
    500, 495, 495, 500, 500, 500, 500, 500, 500, 495, 495, 500, 500, 500, 500, 500, 500, 495, 500,
    500, 500, 505, 505, 500, 500, 500,
];

pub const WHITE_ROOK: [i16; 64] = [
    500, 500, 500, 505, 505, 500, 500, 500, 495, 500, 500, 500, 500, 500, 500, 495, 495, 500, 500,
    500, 500, 500, 500, 495, 495, 500, 500, 500, 500, 500, 500, 495, 495, 500, 500, 500, 500, 500,
    500, 495, 495, 500, 500, 500, 500, 500, 500, 495, 505, 510, 510, 510, 510, 510, 510, 505, 500,
    500, 500, 500, 500, 500, 500, 500,
];

pub const BLACK_QUEEN: [i16; 64] = [
    880, 890, 890, 895, 895, 890, 890, 880, 890, 900, 900, 900, 900, 900, 900, 890, 890, 900, 905,
    905, 905, 905, 900, 890, 895, 900, 905, 905, 905, 905, 900, 895, 900, 900, 905, 905, 905, 905,
    900, 895, 890, 905, 905, 905, 905, 905, 900, 890, 890, 900, 905, 900, 900, 900, 900, 890, 880,
    890, 890, 895, 895, 890, 890, 880,
];

pub const WHITE_QUEEN: [i16; 64] = [
    880, 890, 890, 895, 895, 890, 890, 880, 890, 900, 905, 900, 900, 900, 900, 890, 890, 905, 905,
    905, 905, 905, 900, 890, 900, 900, 905, 905, 905, 905, 900, 895, 895, 900, 905, 905, 905, 905,
    900, 895, 890, 900, 905, 905, 905, 905, 900, 890, 890, 900, 900, 900, 900, 900, 900, 890, 880,
    890, 890, 895, 895, 890, 890, 880,
];

pub const BLACK_KING_MIDDLE: [i16; 64] = [
    -30, -40, -40, -50, -50, -40, -40, -30, -30, -40, -40, -50, -50, -40, -40, -30, -30, -40, -40,
    -50, -50, -40, -40, -30, -30, -40, -40, -50, -50, -40, -40, -30, -20, -30, -30, -40, -40, -30,
    -30, -20, -10, -20, -20, -20, -20, -20, -20, -10, 20, 20, 0, 0, 0, 0, 20, 20, 20, 30, 10, 0, 0,
    10, 30, 20,
];

pub const WHITE_KING_MIDDLE: [i16; 64] = [
    20, 30, 10, 0, 0, 10, 30, 20, 20, 20, 0, 0, 0, 0, 20, 20, -10, -20, -20, -20, -20, -20, -20,
    -10, -20, -30, -30, -40, -40, -30, -30, -20, -30, -40, -40, -50, -50, -40, -40, -30, -30, -40,
    -40, -50, -50, -40, -40, -30, -30, -40, -40, -50, -50, -40, -40, -30, -30, -40, -40, -50, -50,
    -40, -40, -30,
];

pub const BLACK_KING_ENDGAME: [i16; 64] = [
    -50, -40, -30, -20, -20, -30, -40, -50, -30, -20, -10, 0, 0, -10, -20, -30, -30, -10, 20, 30,
    30, 20, -10, -30, -30, -10, 30, 40, 40, 30, -10, -30, -30, -10, 30, 40, 40, 30, -10, -30, -30,
    -10, 20, 30, 30, 20, -10, -30, -30, -30, 0, 0, 0, 0, -30, -30, -50, -30, -30, -30, -30, -30,
    -30, -50,
];

pub const WHITE_KING_ENDGAME: [i16; 64] = [
    -50, -30, -30, -30, -30, -30, -30, -50, -30, -30, 0, 0, 0, 0, -30, -30, -30, -10, 20, 30, 30,
    20, -10, -30, -30, -10, 30, 40, 40, 30, -10, -30, -30, -10, 30, 40, 40, 30, -10, -30, -30, -10,
    20, 30, 30, 20, -10, -30, -30, -20, -10, 0, 0, -10, -20, -30, -50, -40, -30, -20, -20, -30,
    -40, -50,
];
